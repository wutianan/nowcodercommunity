<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.fz.community.dao.MessageMapper">

    <sql id="selectFields">
        id,from_id,to_id,conversation_id,content,status,create_time
    </sql>

    <sql id="insertFields">
        from_id,to_id,conversation_id,content,status,create_time
    </sql>

    <insert id="insertLetter">
        insert into newcodercommnuity.message (<include refid="insertFields"></include>)
        values (#{fromId},#{toId},#{conversationId},#{content},#{status},#{createTime})
    </insert>

    <update id="updateLetterStatus">
        update newcodercommnuity.message set status = #{status}
        where id in
        <foreach collection="messageIds" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </update>

    <select id="selectConversations" resultType="com.fz.community.entity.Message">
        select <include refid="selectFields"></include>
        from newcodercommnuity.message
        where id in (
            select max(id) from newcodercommnuity.message
            where status != 2
            and from_id != 1
            and (from_id = #{userId} or to_id = #{userId})
            group by conversation_Id
        )
        order by id desc
        limit #{offset},#{limit}
    </select>

    <select id="selectConversionCount" resultType="java.lang.Integer">
        select count(m.maxid)
        from (
                 select max(id) as maxid
                 from newcodercommnuity.message
                 where status != 2
                   and from_id != 1
                   and (from_id = #{userId} or to_id = #{userId})
                 group by conversation_Id
             )
        as m
    </select>

    <select id="selectLetters" resultType="com.fz.community.entity.Message">
        select <include refid="selectFields"></include>
        from newcodercommnuity.message
        where status != 2
        and from_id != 1
        and conversation_id = #{conversationId}
        order by id desc
        limit #{offset},#{limit}
    </select>

    <select id="selectLetterCount" resultType="java.lang.Integer">
        select count(id) from newcodercommnuity.message
        where status != 2
        and from_id != 1
        and conversation_id = #{conversationId}
    </select>

    <select id="selectLetterUnreadCount" resultType="java.lang.Integer">
        select count(id) from newcodercommnuity.message
        where
             status = 0
            and from_id != 1
            and to_id = #{userId}
            <if test="conversationId != null">
            and conversation_Id = #{conversationId}
            </if>
    </select>

    <select id="selectLatestNotice" resultType="com.fz.community.entity.Message">
        select <include refid="selectFields"></include>
        from newcodercommnuity.message
        where id in (select max(id) from message where status = 2 and from_id = 1 and to_id = #{userId} and conversation_id = #{topic})
    </select>
    <select id="selectNoticeCount" resultType="java.lang.Integer">
        select count(id) from newcodercommnuity.message where status = 2 and from_id = 1 and to_id = #{userId} and conversation_id = #{topic}
    </select>

    <select id="selectNoticeUnreadCount" resultType="java.lang.Integer">
        select count(id) from newcodercommnuity.message where status = 0 and from_id = 1 and to_id = #{userId}
          <if test="topic != null">
          and conversation_id = #{topic}
          </if>
    </select>
    <select id="selectNotices" resultType="com.fz.community.entity.Message">
        select <include refid="selectFields"></include>
        from newcodercommnuity.message
        where status != 2
        and from_id = 1
        and to_id = #{userId}
        and conversation_id = #{topic}
        order by create_time desc
        limit #{offset}, #{limit}
    </select>


</mapper>